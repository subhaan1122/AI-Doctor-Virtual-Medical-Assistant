from reportlab.lib.pagesizes import A4
from reportlab.lib import colors
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.platypus import (
    BaseDocTemplate, Frame, PageTemplate, Table, Paragraph, Spacer, Image, Flowable
)
from reportlab.lib.units import mm
from reportlab.lib.enums import TA_LEFT, TA_CENTER
import json
import os
from PyPDF2 import PdfReader

def build_pdf(json_path):
    class HorizontalLine(Flowable):
        def __init__(self, width, thickness=1, color=colors.black):
            super().__init__()
            self.width = width
            self.thickness = thickness
            self.color = color
            self.height = thickness

        def draw(self):
            self.canv.setStrokeColor(self.color)
            self.canv.setLineWidth(self.thickness)
            self.canv.line(0, 0, self.width, 0)


    class CenteredHorizontalLine(Flowable):
        def __init__(self, total_width, line_width, thickness=1, color=colors.black):
            super().__init__()
            self.total_width = total_width
            self.line_width = line_width
            self.thickness = thickness
            self.color = color
            self.height = thickness

        def draw(self):
            start_x = (self.total_width - self.line_width) / 2
            self.canv.setStrokeColor(self.color)
            self.canv.setLineWidth(self.thickness)
            self.canv.line(start_x, 0, start_x + self.line_width, 0)


    def draw_footer(canvas, doc):
        page_width = A4[0] - doc.leftMargin - doc.rightMargin
        y = 15 * mm
        canvas.setStrokeColor(colors.grey)
        canvas.setLineWidth(0.5)
        canvas.line(doc.leftMargin, y + 10, doc.leftMargin + page_width, y + 10)
        footer_style = getSampleStyleSheet()['Normal']
        footer_style.fontSize = 9
        footer_style.leading = 10
        footer_style.textColor = colors.grey
        footer_style.alignment = TA_CENTER
        footer_text = "This digital prescription was generated by AI-powered software. Please consult your healthcare provider for any questions."
        p = Paragraph(footer_text, footer_style)
        w, h = p.wrap(page_width, 50)
        p.drawOn(canvas, doc.leftMargin, y - h)


    def draw_prescriber_signature(canvas, doc, prescriber_name):
        page_width = A4[0] - doc.leftMargin - doc.rightMargin
        x_start = doc.leftMargin
        y = 70  

        canvas.saveState()
        canvas.setStrokeColor(colors.black)
        canvas.setLineWidth(0.25)

        line_length = 100
        line_x = x_start + page_width - line_length
        canvas.line(line_x, y + 6, line_x + line_length, y + 6)

        canvas.setFont("Helvetica-Bold", 10)
        canvas.drawString(line_x, y + 12, "Prescriber’s Name:")

        canvas.setFont("Helvetica", 10)
        canvas.drawString(line_x, y - 5, prescriber_name)

        canvas.restoreState()


    def draw_page(canvas, doc):
        draw_prescriber_signature(canvas, doc, data.get("prescriber", {}).get("name", ""))
        draw_footer(canvas, doc)


    with open(json_path, 'r') as f:
        data = json.load(f)


    styles = getSampleStyleSheet()
    label_style = ParagraphStyle("label", fontSize=10, leading=12, alignment=TA_LEFT)
    field_style = ParagraphStyle("field", fontSize=10, leading=12, alignment=TA_LEFT, wordWrap='CJK')
    bullet_style = ParagraphStyle("bullet", fontSize=10, leading=14, leftIndent=10, bulletIndent=0, spaceBefore=3)
    plain_heading_style = ParagraphStyle(
        "plain_heading_centered",
        fontSize=12,
        leading=14,
        textColor=colors.HexColor("#0c1b33"),
        spaceBefore=12,
        spaceAfter=3,
        alignment=TA_CENTER
    )
    numbered_style = ParagraphStyle("numbered", fontSize=10, leading=14, leftIndent=20, firstLineIndent=-10, spaceBefore=3, spaceAfter=3)

    heading_style = ParagraphStyle(
        name="Heading",
        fontSize=30,
        leading=30,
        alignment=TA_LEFT,
        spaceAfter=6,
        spaceBefore=6,
        textColor=colors.HexColor("#0c1b33"),
        leftIndent=-16
    )

    general_instructions = [
        "Take medications exactly as prescribed. Do not skip doses.",
        "Avoid self-medication. Consult your doctor before taking any new drugs.",
        "Follow up as advised by your healthcare provider.",
        "In case of any adverse reaction or allergic symptoms, seek immediate medical help.",
        "Carry this prescription during your hospital visits.",
    ]


    def section_header(text):
        return Table(
            [[Paragraph(f"<b>{text}</b>", label_style)]],
            colWidths=[180 * mm],
            style=[
                ('BACKGROUND', (0, 0), (-1, -1), colors.HexColor("#d6e0f0")),
                ('TEXTCOLOR', (0, 0), (-1, -1), colors.black),
                ('LEFTPADDING', (0, 0), (-1, -1), 4),
                ('BOX', (0, 0), (-1, -1), 0.5, colors.black),
                ('VALIGN', (0, 0), (-1, -1), 'MIDDLE')
            ]
        )


    def generate_pdf(filename, include_general_instructions=True):
        doc = BaseDocTemplate(
            filename,
            pagesize=A4,
            rightMargin=20,
            leftMargin=20,
            topMargin=20,
            bottomMargin=60,  
        )
        frame = Frame(doc.leftMargin, doc.bottomMargin, doc.width, doc.height - 20, id='normal')
        template = PageTemplate(id='main_template', frames=frame, onPage=draw_page)
        doc.addPageTemplates([template])

        elements = []

        logo_path = "logo.png"
        logo = Image(logo_path)
        logo.drawHeight = 100
        logo.drawWidth = 100
        heading_table = Table(
            [[Paragraph("<b>MEDICAL</b><br/>PRESCRIPTION", heading_style), logo]],
            colWidths=[120 * mm, 60 * mm],
            style=[
                ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
                ('ALIGN', (1, 0), (1, 0), 'RIGHT'),
                ('LEFTPADDING', (0, 0), (0, 0), 15),
                ('RIGHTPADDING', (1, 0), (1, 0), 15),
            ]
        )
        elements.append(heading_table)
        page_width = A4[0] - doc.leftMargin - doc.rightMargin
        elements.append(HorizontalLine(page_width, thickness=2, color=colors.black))
        elements.append(Spacer(1, 15))

        pi = data.get("patient_info", {})
        patient_info = [
            [Paragraph("<b>Name:</b>", label_style), Paragraph(str(pi.get("name", "")), field_style),
            Paragraph("<b>Age:</b>", label_style), Paragraph(str(pi.get("age", "")), field_style),
            Paragraph("<b>Gender:</b>", label_style), Paragraph(pi.get("gender", ""), field_style)],
            [Paragraph("<b>Date:</b>", label_style), Paragraph(str(pi.get("date", "")), field_style),
            "", "", "", ""]
        ]
        elements.append(section_header("Patient Information"))
        elements.append(Table(patient_info, colWidths=[25 * mm, 40 * mm, 15 * mm, 25 * mm, 20 * mm, 55 * mm],
                            style=[("GRID", (0, 0), (-1, -1), 0.25, colors.black)]))
        elements.append(Spacer(1, 6))

        elements.append(section_header("Diagnosis"))
        elements.append(Table([[Paragraph(data.get("diagnosis", "").replace("**", "").replace("\n", "<br/>"), field_style)]], colWidths=[180 * mm],
                            style=[("BOX", (0, 0), (-1, -1), 0.25, colors.black)]))
        elements.append(Spacer(1, 6))

        elements.append(section_header("Medications"))
        med_header = [[
            Paragraph("Medicine Name", label_style),
            Paragraph("Dosage & Route", label_style),
            Paragraph("Frequency & Duration", label_style),
            Paragraph("Refills", label_style),
            Paragraph("Special Instructions", label_style)
        ]]
        med_data = []
        for med in data.get("medication", []):
            med_data.append([
                Paragraph(med.get("name", ""), field_style),
                Paragraph(med.get("dosage_and_route", ""), field_style),
                Paragraph(med.get("frequency_and_duration", ""), field_style),
                Paragraph(med.get("refills", ""), field_style),
                Paragraph(med.get("special_instructions", ""), field_style),
            ])
        if not med_data:
            med_data = [["", "", "", "", ""]]
        elements.append(Table(med_header + med_data,
                            colWidths=[40 * mm, 40 * mm, 45 * mm, 20 * mm, 35 * mm],
                            style=[("GRID", (0, 0), (-1, -1), 0.25, colors.black),
                                    ("BACKGROUND", (0, 0), (-1, 0), colors.HexColor("#D9D9D9")),
                                    ("VALIGN", (0, 1), (-1, -1), "TOP")]))
        elements.append(Spacer(1, 6))

        elements.append(section_header("Non-Pharmacological Recommendations"))
        recs = data.get("non_pharmacological_recommendations", [])
        recs_paragraphs = [Paragraph(f"• {rec['details']['text'].replace('**', '')}", bullet_style) for rec in recs] if recs else [Paragraph("None.", field_style)]
        elements.append(Table([[r] for r in recs_paragraphs], colWidths=[180 * mm],
                            style=[("BOX", (0, 0), (-1, -1), 0.25, colors.black),
                                    ("VALIGN", (0, 0), (-1, -1), "TOP"),
                                    ("LEFTPADDING", (0, 0), (-1, -1), 6)]))
        elements.append(Spacer(1, 6))

        elements.append(section_header("Medical Tests Recommended"))
        tests = data.get("medical_tests", [])
        tests_paragraphs = [Paragraph(f"• {test['details']['text'].replace('**', '')}", bullet_style) for test in tests] if tests else [Paragraph("None.", field_style)]
        elements.append(Table([[t] for t in tests_paragraphs], colWidths=[180 * mm],
                            style=[("BOX", (0, 0), (-1, -1), 0.25, colors.black),
                                    ("VALIGN", (0, 0), (-1, -1), "TOP"),
                                    ("LEFTPADDING", (0, 0), (-1, -1), 6)]))
        elements.append(Spacer(1, 5))

        if include_general_instructions:
            elements.append(Paragraph("<b>General Instructions</b>", plain_heading_style))
            elements.append(CenteredHorizontalLine(page_width, 200, thickness=1, color=colors.black))
            elements.append(Spacer(1, 2))
            for i, instruction in enumerate(general_instructions, start=1):
                elements.append(Paragraph(f"{i}. {instruction}", numbered_style))
            elements.append(Spacer(1, 6))


        doc.build(elements)


    temp_filename = "temp_prescription.pdf"
    final_filename = "prescription.pdf"

    generate_pdf(temp_filename, include_general_instructions=True)

    reader = PdfReader(temp_filename)
    if len(reader.pages) > 1:
        print("More than 1 page — regenerating without General Instructions.")
        generate_pdf(final_filename, include_general_instructions=False)
        os.remove(temp_filename)
    else:
        if os.path.exists(final_filename):
            os.remove(final_filename)
        os.rename(temp_filename, final_filename)

    return final_filename